import sys
sys.path.insert(1, 'CODE AND EXPERIMENTS/CGR-pcmer/')
import AQUACULTURE
from AQUACULTURE.module import *


# output with shap values

def create_pdf(seaBass, mortality, N, i, pg, sizePag, X_test,  y_test, shap_values, dataset_cgr, directory):
  if N - sizePag * (pg-1) < sizePag: sizePag = N - sizePag * (pg-1); #print('sizePag', sizePag)
  fig, axs = plt.subplots(sizePag, 1, figsize=(5,sizePag*3))
  i_first = i; count = 0
  #print('i_first', i_first)
  for ax in axs:
    shap.image_plot(shap_values[i-1], X_test[i-1],  show=False)

    if mortality[i-1] == '1': status = 'dead'
    else: status = 'alive'

    # attention: the model used '0' to predict mortality, '1' as alive; is a numpy
    if y_test[i-1] == 1 : pred = 'alive';
    else: pred = 'dead'
    plt.title('ID: ' + str(seaBass[i-1]) + "; " + 'status: ' + str(status) + " - " + 'predict: ' + str(pred))

    plt.savefig("prova.png", bbox_inches = 'tight', pad_inches = 0)
    img = np.asarray(Image.open('prova.png'))
    plt.margins(x=0, y=0)
    ax.axis('off')
    ax.imshow(img, vmin=0, vmax=255)
    plt.clf(); plt.close(); os.remove("prova.png")
    
    count += 1
    if count == sizePag:
      break
    else: i+=1
    

 
      
  fig.savefig(directory + '/' + dataset_cgr + '-' + str(i_first) + '-' + str(i) + '.pdf', bbox_inches = 'tight', pad_inches = 0.2)

  return (i + 1)


def create_pdfDim(seaBass, channel, N, i, pg, sizeRow, column, pgMax, X_test, y_test, shap_values, dataset_cgr, directory, y_predict):
  sizePag = sizeRow * column # items in all page
  if N - (sizePag * (pg-1)) < sizePag:  # items to insert in page 'pg'
    sizePag = N - (sizePag * (pg-1))

  if sizePag < (sizeRow * column):
    sizeRow = int(math.ceil(sizePag / column))

  fig, axs = plt.subplots(sizeRow, column, figsize=(35, 35))

  i_first = i; count = 0
  
  for r in range(0, sizeRow):
    rest_c = 0; old_c = 0
    for c in range(0, column):
      shap.image_plot(shap_values[i-1], X_test[i-1],  show=False)
      
      # attention: the model used '0' to predict mortality, '1' as alive; is a numpy
      if y_test[i-1] == '1': status = 'alive'
      else: status = 'dead'

      if channel == "RGB" and 'version1' in dataset_cgr:
      # for best predict (already saved in ensemble file)
        if y_predict[i-1] == 1 : pred = 'dead'
        else: pred = 'alive'  
      else:
      # predict of model
        if y_predict[i-1] == 1 : pred = 'alive'
        else: pred = 'dead'

      plt.title('ID: ' + str(seaBass[i-1]) + "; " + 'status: ' + str(status) + " - " + 'predict: ' + str(pred))

      plt.savefig("prova.png", bbox_inches = 'tight', pad_inches = 0)
      img = np.asarray(Image.open('prova.png'))

      plt.margins(x=0, y=0)

      if sizeRow > 1:
        ax = axs[r][c]
      else:
        ax = axs[c]
      ax.axis('off')
      ax.imshow(img, vmin=0, vmax=255)
      plt.clf(); plt.close(); os.remove("prova.png")

      count += 1
      if count == sizePag:
        rest_c = column - (c + 1); # number of item form delete by last column
        old_c = c
        break
      else: i+=1

  if pg == pgMax:
    for c_j in range(column-1, column-rest_c-1, -1):
      if sizeRow > 1: axs[sizeRow-1][c_j].set_visible(False)
      else: axs[c_j].set_visible(False)


  fig.savefig(directory + '/' + dataset_cgr + '-' + str(i_first) + '-' + str(i) + '.pdf', bbox_inches = 'tight', pad_inches = 0.2)

  return (i + 1)

  
def shapleyImagePlot(X_data, y_data, X_test, y_test, model, dataset, channel, dataset_cgr, y_predict):
    directory = 'CODE AND EXPERIMENTS/CGR-pcmer/AQUACULTURE/ExplanationClassification/ShapleyValues/' + channel + '/' + dataset
    if not os.path.exists(directory):
      os.makedirs(directory)

    # output with shap values in image (each plot is a sea bass of the test set)

    seaBass = ['PL04-A08','PL05-A05','PL05-E09','PL06-B02','PL06-E11','PL07-B01','PL07-G02','PL08-F12','PL09-E11','PL04-A09','PL05-A06','PL05-E11','PL06-B04','PL06-E12','PL07-B04','PL07-G04','PL08-G01','PL09-F01','PL04-A11','PL05-A07','PL05-F02','PL06-B06','PL06-F03','PL07-B06','PL07-G05','PL08-G02','PL09-F02','PL04-A12','PL05-A08','PL05-F04','PL06-B07','PL06-F04','PL07-B07','PL07-G07','PL08-H12','PL09-F03','PL04-B06','PL05-A09','PL05-F07','PL06-B08','PL06-F07','PL07-B11','PL07-G08','PL09-A11','PL09-F04','PL04-B09','PL05-B02','PL05-F08','PL06-B11','PL06-F09','PL07-B12','PL07-G11','PL09-B01','PL09-F06','PL04-B11','PL05-B04','PL05-F09','PL06-B12','PL06-F10','PL07-C01','PL07-G12','PL09-B04','PL09-F08','PL04-C09','PL05-B07','PL05-G03','PL06-C01','PL06-F12','PL07-C03','PL07-H01','PL09-B07','PL09-G02','PL04-D06','PL05-B10','PL05-G04','PL06-C02','PL06-G01','PL07-C05','PL07-H02','PL09-B11','PL09-G04','PL04-D07','PL05-B12','PL05-G06','PL06-C04','PL06-G02','PL07-C08','PL07-H03','PL09-C02','PL09-G07','PL04-D11','PL05-C01','PL05-G07','PL06-C05','PL06-G06','PL07-C09','PL07-H05','PL09-C04','PL09-G08','PL04-D12','PL05-C02','PL05-G08','PL06-C06','PL06-G08','PL07-C10','PL07-H06','PL09-C06','PL09-G09','PL04-E08','PL05-C06','PL05-G09','PL06-C10','PL06-G12','PL07-C11','PL07-H07','PL09-C11','PL09-H01','PL04-E10','PL05-C11','PL05-G10','PL06-C11','PL06-H01','PL07-C12','PL07-H09','PL09-D02','PL09-H02','PL04-E11','PL05-C12','PL05-G11','PL06-D02','PL06-H02','PL07-D01','PL07-H11','PL09-D03','PL09-H04','PL04-E12','PL05-D01','PL05-G12','PL06-D03','PL06-H03','PL07-D07','PL07-H12','PL09-D04','PL09-H05','PL04-F06','PL05-D02','PL05-H04','PL06-D05','PL06-H06','PL07-D09','PL08-A02','PL09-D06','PL09-H06','PL04-F07','PL05-D03','PL05-H08','PL06-D06','PL06-H07','PL07-D10','PL08-A12','PL09-D09','PL09-H07','PL04-F08','PL05-D04','PL05-H10','PL06-D07','PL06-H09','PL07-E05','PL08-B01','PL09-D11','PL09-H08','PL04-F09','PL05-D05','PL05-H12','PL06-D08','PL07-A01','PL07-E07','PL08-B03','PL09-D12','PL09-H10','PL04-G05','PL05-D06','PL06-A03','PL06-D09','PL07-A02','PL07-E09','PL08-B12','PL09-E01','PL09-H11','PL04-G07','PL05-D07','PL06-A05','PL06-D12','PL07-A03','PL07-F01','PL08-C02','PL09-E02','PL04-G10','PL05-D09','PL06-A07','PL06-E02','PL07-A05','PL07-F02','PL08-D01','PL09-E03','PL04-G12','PL05-D10','PL06-A08','PL06-E03','PL07-A06','PL07-F03','PL08-D02','PL09-E04','PL04-H05','PL05-E02','PL06-A09','PL06-E04','PL07-A07','PL07-F06','PL08-E01','PL09-E05','PL04-H11','PL05-E03','PL06-A10','PL06-E08','PL07-A08','PL07-F09','PL08-E12','PL09-E06','PL05-A04','PL05-E05','PL06-A11','PL06-E09','PL07-A10','PL07-G01','PL08-F02','PL09-E07','PL08n-A07','PL10-A05','PL10-H09','PL11-F07','PL12-D02','PL13-A06','PL13-F09','PL14-C02','PL14-F09','PL08n-B10','PL10-B05','PL10-H11','PL11-F08','PL12-D09','PL13-A10','PL13-G01','PL14-C05','PL14-G03','PL08n-B11','PL10-C04','PL11-A02','PL11-F10','PL12-D11','PL13-B01','PL13-G02','PL14-C08','PL14-G04','PL08n-D07','PL10-C09','PL11-A04','PL11-G09','PL12-D12','PL13-B02','PL13-G03','PL14-C10','PL14-G08','PL08n-E06','PL10-D09','PL11-A05','PL11-G12','PL12-E01','PL13-B03','PL13-G06','PL14-C11','PL14-G10','PL08n-E08','PL10-D10','PL11-A11','PL11-H05','PL12-E05','PL13-B06','PL13-G07','PL14-D02','PL14-G11','PL08n-E09','PL10-E02','PL11-B04','PL11-H10','PL12-E12','PL13-B08','PL13-G12','PL14-D04','PL14-G12','PL08n-F06','PL10-E03','PL11-B07','PL11-H12','PL12-F05','PL13-C01','PL13-H04','PL14-D06','PL14-H01','PL08n-F07','PL10-E08','PL11-B09','PL12-A01','PL12-F06','PL13-C02','PL13-H09','PL14-D10','PL14-H10','PL08n-F08','PL10-F04','PL11-B10','PL12-A05','PL12-F12','PL13-C04','PL13-H12','PL14-D11','PL14-H11','PL08n-F10','PL10-F08','PL11-C02','PL12-A07','PL12-G01','PL13-C08','PL14-A03','PL14-D12','PL15-A02','PL08n-G04','PL10-F12','PL11-C10','PL12-A10','PL12-G05','PL13-D01','PL14-A04','PL14-E03','PL15-G01','PL08n-G06','PL10-G07','PL11-D02','PL12-B03','PL12-G09','PL13-D09','PL14-A05','PL14-E04','PL08n-G07','PL10-G09','PL11-D03','PL12-B04','PL12-G11','PL13-D10','PL14-B01','PL14-E09','PL08n-G09','PL10-G12','PL11-D04','PL12-B08','PL12-G12','PL13-E10','PL14-B02','PL14-E10','PL08n-H06','PL10-H04','PL11-D06','PL12-B11','PL12-H04','PL13-E12','PL14-B03','PL14-F03','PL08n-H08','PL10-H05','PL11-E02','PL12-C04','PL12-H12','PL13-F05','PL14-B06','PL14-F06','PL10-A03',' PL10-H06','PL11-E03','PL12-C06','PL13-A01','PL13-F06','PL14-B09','PL14-F07','PL10-A04','PL10-H08','PL11-F06','PL12-C07','PL13-A02','PL13-F08','PL14-C01','PL14-F08']
    
    if channel == "RGB" and 'version1' in dataset_cgr: # i have already computate the best model
      y_bestPredict = []; dict_seabassPredict = {}
      orderKeys = ["PL04-A08","PL04-A09","PL04-A11","PL04-A12","PL04-B06","PL04-B09","PL04-B11","PL04-C09","PL04-D06","PL04-D07","PL04-D11","PL04-D12","PL04-E08","PL04-E10","PL04-E11","PL04-E12","PL04-F06","PL04-F07","PL04-F08","PL04-F09","PL04-G05","PL04-G07","PL04-G10","PL04-G12","PL04-H05","PL04-H11","PL05-A04","PL05-A05","PL05-A06","PL05-A07","PL05-A08","PL05-A09","PL05-B02","PL05-B04","PL05-B07","PL05-B10","PL05-B12","PL05-C01","PL05-C02","PL05-C06","PL05-C11","PL05-C12","PL05-D01","PL05-D02","PL05-D03","PL05-D04","PL05-D05","PL05-D06","PL05-D07","PL05-D09","PL05-D10","PL05-E02","PL05-E03","PL05-E05","PL05-E09","PL05-E11","PL05-F02","PL05-F04","PL05-F07","PL05-F08","PL05-F09","PL05-G03","PL05-G04","PL05-G06","PL05-G07","PL05-G08","PL05-G09","PL05-G10","PL05-G11","PL05-G12","PL05-H04","PL05-H08","PL05-H10","PL05-H12","PL06-A03","PL06-A05","PL06-A07","PL06-A08","PL06-A09","PL06-A10","PL06-A11","PL06-B02","PL06-B04","PL06-B06","PL06-B07","PL06-B08","PL06-B11","PL06-B12","PL06-C01","PL06-C02","PL06-C04","PL06-C05","PL06-C06","PL06-C10","PL06-C11","PL06-D02","PL06-D03","PL06-D05","PL06-D06","PL06-D07","PL06-D08","PL06-D09","PL06-D12","PL06-E02","PL06-E03","PL06-E04","PL06-E08","PL06-E09","PL06-E11","PL06-E12","PL06-F03","PL06-F04","PL06-F07","PL06-F09","PL06-F10","PL06-F12","PL06-G01","PL06-G02","PL06-G06","PL06-G08","PL06-G12","PL06-H01","PL06-H02","PL06-H03","PL06-H06","PL06-H07","PL06-H09","PL07-A01","PL07-A02","PL07-A03","PL07-A05","PL07-A06","PL07-A07","PL07-A08","PL07-A10","PL07-B01","PL07-B04","PL07-B06","PL07-B07","PL07-B11","PL07-B12","PL07-C01","PL07-C03","PL07-C05","PL07-C08","PL07-C09","PL07-C10","PL07-C11","PL07-C12","PL07-D01","PL07-D07","PL07-D09","PL07-D10","PL07-E05","PL07-E07","PL07-E09","PL07-F01","PL07-F02","PL07-F03","PL07-F06","PL07-F09","PL07-G01","PL07-G02","PL07-G04","PL07-G05","PL07-G07","PL07-G08","PL07-G11","PL07-G12","PL07-H01","PL07-H02","PL07-H03","PL07-H05","PL07-H06","PL07-H07","PL07-H09","PL07-H11","PL07-H12","PL08-A02","PL08-A12","PL08-B01","PL08-B03","PL08-B12","PL08-C02","PL08-D01","PL08-D02","PL08-E01","PL08-E12","PL08-F02","PL08-F12","PL08-G01","PL08-G02","PL08-H12","PL08n-A07","PL08n-B10","PL08n-B11","PL08n-D07","PL08n-E06","PL08n-E08","PL08n-E09","PL08n-F06","PL08n-F07","PL08n-F08","PL08n-F10","PL08n-G04","PL08n-G06","PL08n-G07","PL08n-G09","PL08n-H06","PL08n-H08","PL09-A11","PL09-B01","PL09-B04","PL09-B07","PL09-B11","PL09-C02","PL09-C04","PL09-C06","PL09-C11","PL09-D02","PL09-D03","PL09-D04","PL09-D06","PL09-D09","PL09-D11","PL09-D12","PL09-E01","PL09-E02","PL09-E03","PL09-E04","PL09-E05","PL09-E06","PL09-E07","PL09-E11","PL09-F01","PL09-F02","PL09-F03","PL09-F04","PL09-F06","PL09-F08","PL09-G02","PL09-G04","PL09-G07","PL09-G08","PL09-G09","PL09-H01","PL09-H02","PL09-H04","PL09-H05","PL09-H06","PL09-H07","PL09-H08","PL09-H10","PL09-H11","PL10-A03","PL10-A04","PL10-A05","PL10-B05","PL10-C04","PL10-C09","PL10-D09","PL10-D10","PL10-E02","PL10-E03","PL10-E08","PL10-F04","PL10-F08","PL10-F12","PL10-G07","PL10-G09","PL10-G12","PL10-H04","PL10-H05","PL10-H06","PL10-H08","PL10-H09","PL10-H11","PL11-A02","PL11-A04","PL11-A05","PL11-A11","PL11-B04","PL11-B07","PL11-B09","PL11-B10","PL11-C02","PL11-C10","PL11-D02","PL11-D03","PL11-D04","PL11-D06","PL11-E02","PL11-E03","PL11-F06","PL11-F07","PL11-F08","PL11-F10","PL11-G09","PL11-G12","PL11-H05","PL11-H10","PL11-H12","PL12-A01","PL12-A05","PL12-A07","PL12-A10","PL12-B03","PL12-B04","PL12-B08","PL12-B11","PL12-C04","PL12-C06","PL12-C07","PL12-D02","PL12-D09","PL12-D11","PL12-D12","PL12-E01","PL12-E05","PL12-E12","PL12-F05","PL12-F06","PL12-F12","PL12-G01","PL12-G05","PL12-G09","PL12-G11","PL12-G12","PL12-H04","PL12-H12","PL13-A01","PL13-A02","PL13-A06","PL13-A10","PL13-B01","PL13-B02","PL13-B03","PL13-B06","PL13-B08","PL13-C01","PL13-C02","PL13-C04","PL13-C08","PL13-D01","PL13-D09","PL13-D10","PL13-E10","PL13-E12","PL13-F05","PL13-F06","PL13-F08","PL13-F09","PL13-G01","PL13-G02","PL13-G03","PL13-G06","PL13-G07","PL13-G12","PL13-H04","PL13-H09","PL13-H12","PL14-A03","PL14-A04","PL14-A05","PL14-B01","PL14-B02","PL14-B03","PL14-B06","PL14-B09","PL14-C01","PL14-C02","PL14-C05","PL14-C08","PL14-C10","PL14-C11","PL14-D02","PL14-D04","PL14-D06","PL14-D10","PL14-D11","PL14-D12","PL14-E03","PL14-E04","PL14-E09","PL14-E10","PL14-F03","PL14-F06","PL14-F07","PL14-F08","PL14-F09","PL14-G03","PL14-G04","PL14-G08","PL14-G10","PL14-G11","PL14-G12","PL14-H01","PL14-H10","PL14-H11","PL15-A02","PL15-G01"]
    # predict best model (reported in ensemble files)
      if "specific80" in dataset_cgr: y_bestPredict = [0,1,1,0,0,0,0,0,0,1,0,0,1,1,0,0,1,1,1,1,0,0,0,1,0,1,0,1,1,0,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,0,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,0,1,0,0,1,1,0,1,0,0,0,0,0,1,1,1,0,0,1,0,1,1,1,1,1,1,0,1,0,0,1,0,1,1,0,1,1,1,1,0,1,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,0,0,0,0,1,1,0,1,1,1,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,0,1,1,0,0,0,1,1,0,1,1,0,1,0,1,1,0,1,1,1,1,0,1,0,1,0,0,0,1,1,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,1,1,1,1,0,1,0,1,0,0,0,0,1,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,0,0,1,0,0,0,1,0,0,1,1,1,1,0,1,1,0,1,0,0,1,0,1,0,0,0,1,1,1,1,0,1,0,0,1,0,1,0,0,1,1,1,1,1,1,0,1,1,1,0,0,0,1,0,0,0,0,0,1,1,0,0,1,1,0]
      elif "control80" in dataset_cgr: y_bestPredict = [0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
      elif "specific50" in dataset_cgr: y_bestPredict = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] 
      elif "control50" in dataset_cgr: y_bestPredict = [0,1,0,0,0,0,0,1,1,0,0,0,1,1,1,1,0,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,0,0,0,0,0,1,0,1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,0,0,0,0,1,1,0,0,0,0,1,1,0,1,1,1,0,0,0,0,1,1,1,0,0,0,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,0,0,0,1,1,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,1,0,1,0,1,0,0,0,0,1,1,0,0,1,0,0,1,1,0,1,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,1,1,1,1,1,1,1,0,0,1,0,1,0,0,1,1,0,0,1,1,0,0,0,1,1,0,0,0,1,0,0,0,0,1,0,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,1,0,1,1,0,0,1,0,1,1,1,0,1,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,0,0,0,1,1,0,1,0,1,0,0,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,1,1,0,0,1,0,1,1,0,1,1,1,0,1,1,0,1,1,1,0,0,1,0,1,1,1,1,0,1,0,0,0,1,0,1,0,0,0,0,1,0,1,0,0,1,0,1,1,0]  
      elif "specific10" in dataset_cgr: y_bestPredict = [1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,0,0,0,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,0,0,1,1,1,1,0,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,1,1,0,0,1,1,1] 
      elif "control10" in dataset_cgr: y_bestPredict = [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]  
      elif "Hk_NNV_broad" in dataset_cgr: y_bestPredict = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] 
      elif "Hk_NNV_narr" in dataset_cgr: y_bestPredict = [0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,0,0,1,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,1,1,0,1,0,1,0,0,0,1,1,1,0,0,1,1,0,0,0,0,0,1,1,1,0,0,0,1,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,0,0,0,1,0,1,0,0,0,0,1,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,1,0,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,1,1,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0]  
      elif "Hk_mock_narr" in dataset_cgr: y_bestPredict = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] 
      elif "Br_NNV_broad" in dataset_cgr: y_bestPredict = [1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] 
      elif "Br_NNV_narr" in dataset_cgr: y_bestPredict = [0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,1,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,1,1,0,0,1,0,0,0,1,1,0,1,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,1,1,0,0,1,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1]  
      elif "Br_mock_broad" in dataset_cgr: y_bestPredict = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0]  
      elif "Br_mock_narr" in dataset_cgr: y_bestPredict = [1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,0,1,1,1,1,1,0,0,1,0,1,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,0,1,1,0,1,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,0,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,0,1,1,1,0,1,0,1,1,1,1,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,0,1,0,0,1,1,0,1,1,1,0,1,0,1,1,1,1,1,0,0,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,0,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,0,0,1,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,0,1] 
      for idx_key in range(0, len(orderKeys)):
       dict_seabassPredict.update({orderKeys[idx_key]:y_bestPredict[idx_key]})
      y_bestPredict = list(dict_seabassPredict.values())
    
    else:
      # for GS and for version > 1.0
      y_bestPredict = y_predict
 

    shap.initjs()
    print("Shapley Values...")
    class_labels = ["dead","alive"]
    masker = shap.maskers.Image("inpaint_telea", X_data[0].shape)
    explainer = shap.Explainer(model, masker, output_names=class_labels)
    classes =  np.unique(y_data)
    mapping = dict(zip(classes, class_labels))
    shap_values = explainer(X_test, outputs=shap.Explanation.argsort.flip[:1])
    print("Actual Labels    : {}".format([mapping[i] for i in y_test]))
    probs = model.predict(X_test)
    print("Predicted Labels : {}".format([mapping[i] for i in np.argmax(probs, axis=1)]))
    print("Probabilities : {}".format(np.max(probs, axis=1)))
    
    sizeRow = 10; column = 5; i = 1; N = X_test.shape[0]
    pgMax = math.ceil(N / (sizeRow * column))
  
    for pg in range(1, pgMax+1):
      i = create_pdfDim(seaBass, channel, N, i, pg, sizeRow, column, pgMax, X_test, y_test, shap_values, dataset_cgr, directory, y_bestPredict)

    
 
